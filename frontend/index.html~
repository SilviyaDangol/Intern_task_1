<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Manager</title>
    <link href="https://cdn.jsdelivr.net/npm/daisyui@4.12.23/dist/full.min.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-base-200 min-h-screen p-4" onload="loadTasks()">
<dialog id="delete_modal" class="modal modal-bottom sm:modal-middle"></dialog>
<dialog id="confirm_modal" class="modal modal-bottom sm:modal-middle"></dialog>
<div class="max-w-3xl mx-auto">
    <h1 class="text-2xl font-bold mb-8">Task Manager</h1>

    <!-- Task Input Bar -->
    <div class="flex gap-2 mb-8">
        <input
                type="text"
                id="taskInput"
                placeholder="Enter a new task..."
                class="input input-bordered flex-1"
        >
        <button
                onclick="addTask()"
                class="btn btn-primary"
        >
            Add Task
        </button>
        <div class="join">
            <button class="btn btn-primary join-item rounded-r-full" onclick="search()">Search</button>
        </div>
    </div>

    <!-- Task List -->
    <div id="taskList" class="space-y-4">
    </div>
</div>

<script>
    let taskToDelete = null;
    const deleteModal = document.getElementById('delete_modal');
    const confirmModal = document.getElementById('confirm_modal');

    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString() + ', ' + date.toLocaleTimeString();
    }

    function createTaskCard(task) {
        return `
            <div class="card bg-base-100 shadow-xl" id="${task.task_id}">
                <div class="card-body p-4 flex-row justify-between items-center">
                    <div>
                        <h3 class="font-medium">${task.task_name}</h3>
                        <p class="text-sm opacity-70">Created: ${formatDate(task.task_create_date)}</p>
                    </div>
                    <div class="flex gap-2 items-center">
                        <select class="select select-bordered w-32" onchange="updateStatus('${task.task_id}', this.value)">
                            <option value="incomplete" ${task.task_status === 'incomplete' ? 'selected' : ''}>in progress</option>
                            <option value="complete" ${task.task_status === 'complete' ? 'selected' : ''}>Completed</option>
                        </select>
                        <button class="btn btn-square btn-sm btn-error" onclick="showDeleteModal(this)">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    async function loadTasks() {
        try {
            const response = await fetch('http://localhost:3000/get_task');
            const tasks = await response.json();
            const taskList = document.getElementById('taskList');
            taskList.innerHTML = tasks.map(task => createTaskCard(task)).join('');
        } catch (error) {
            console.error('Error loading tasks:', error);
        }
    }

    function updateStatus(taskId, status) {
        fetch('http://localhost:3000/update_status', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ taskId, status })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadTasks(); // Reload tasks to show updated status
                }
            })
            .catch(error => console.error('Error updating status:', error));
    }

    function addTask() {
        const taskInput = document.getElementById('taskInput');
        const task = taskInput.value;
        if (task.trim() === '') {
            showModal();
        } else {
            fetch('http://localhost:3000/set_task', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ task: task })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const taskList = document.getElementById('taskList');
                        taskList.insertAdjacentHTML('afterbegin', createTaskCard(data.task));
                        taskInput.value = '';
                        search()
                    }
                })
                .catch(error => console.error('Error adding task:', error));
        }
    }

    function confirmDelete(taskId) {
        fetch('http://localhost:3000/delete_task', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ taskId: taskId })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    taskToDelete.remove();
                }
            })
            .catch(error => console.error('Error deleting task:', error));
        deleteModal.close();
    }

    function showDeleteModal(button) {
        taskToDelete = button.closest('.card');
        const taskId = taskToDelete.id;

        deleteModal.innerHTML = `
            <form method="dialog" class="modal-box">
                <h3 class="font-bold text-lg">Confirm Delete</h3>
                <p class="py-4">Are you sure you want to delete this task?</p>
                <div class="modal-action">
                    <button class="btn" onclick="cancelDelete()">Cancel</button>
                    <button class="btn btn-error" onclick="confirmDelete('${taskId}')">Delete</button>
                </div>
            </form>
            <form method="dialog" class="modal-backdrop">
                <button>close</button>
            </form>
        `;
        deleteModal.showModal();
    }

    function showModal() {
        confirmModal.innerHTML = `
            <form method="dialog" class="modal-box">
                <h3 class="font-bold text-lg">ADD TASK FIRST TASK IS EMPTY</h3>
            </form>
            <form method="dialog" class="modal-backdrop">
                <button>close</button>
            </form>
        `;
        confirmModal.showModal();
    }

    function cancelDelete() {
        taskToDelete = null;
        deleteModal.close();
    }


    function search() {
        const searchInput = document.getElementById('taskInput');
        const searchTerm = searchInput.value;
        fetch(`http://localhost:3000/search_task`,{
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({searchTerm: searchTerm})
        }).then(response => response.json()).then(data => {
            const taskList = document.getElementById('taskList');
            taskList.innerHTML = data.map(task => createTaskCard(task)).join('');
        })
    }
    // Get the input element
    const inputField = document.getElementById('taskInput');

    // Add an event listener for the 'input' event
    inputField.addEventListener('input', function(event) {
        search();
    });
</script>
</body>
</html>